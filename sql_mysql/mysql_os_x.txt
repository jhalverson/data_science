Jonathan Halverson
Thursday, June 23, 2016
-----------------------

### Make sure to start the server through system preferences
jhalverson$ mysql -p // with the server running

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| test               |
+--------------------+
2 rows in set (0.06 sec)

mysql> use test;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;
+----------------+
| Tables_in_test |
+----------------+
| persons        |
| test_log       |
+----------------+
2 rows in set (0.00 sec)


mysql> describe test.persons;
+-------------+--------------+------+-----+---------+-------+
| Field       | Type         | Null | Key | Default | Extra |
+-------------+--------------+------+-----+---------+-------+
| id          | int(11)      | NO   | PRI | 0       |       |
| description | varchar(255) | YES  |     | NULL    |       |
| ContactName | varchar(255) | YES  |     | NULL    |       |
+-------------+--------------+------+-----+---------+-------+
3 rows in set (0.01 sec)

mysql> select * from persons;
+----+-------------------------------+----------------+
| id | description                   | ContactName    |
+----+-------------------------------+----------------+
| 11 | Gas canisters                 | James Woodborn |
| 56 | Digital compass for dog sleds | Charlie Parker |
+----+-------------------------------+----------------+
2 rows in set (0.07 sec)


mysql> describe test_log;
+-------------+--------------+------+-----+-------------+----------------+
| Field       | Type         | Null | Key | Default     | Extra          |
+-------------+--------------+------+-----+-------------+----------------+
| id          | int(11)      | NO   | PRI | NULL        | auto_increment |
| message     | varchar(255) | YES  |     | NULL        |                |
| ContactName | varchar(100) | YES  |     | Joey Baggio |                |
+-------------+--------------+------+-----+-------------+----------------+
3 rows in set (0.01 sec)


### delete a table
mysql> drop table test_log;
Query OK, 0 rows affected (0.28 sec)

mysql> show tables;
+----------------+
| Tables_in_test |
+----------------+
| persons        |
+----------------+
1 row in set (0.00 sec)


### I tried to load a csv file but it failed due to jhalverson not having access
### I was able to make the table as jhalverson, however
mysql> create table products (ID int, ProductName varchar(255), ContactName varchar(255), Price float);
Query OK, 0 rows affected (0.22 sec)

### I then logged in as root and was then able to load the CSV file
nanomines:mysql jhalverson$ mysql -u root -p

load data infile "/Users/jhalverson/data_science/sql_mysql/products.csv" into table products columns terminated by ',' lines terminated by '\n';


mysql> create table suppliers (ID int unsigned primary key auto_increment, Supplier char(80) not null, ProductName char(80) not null, ContactEmail char(80) default 'contact@host.com');
Query OK, 0 rows affected (0.06 sec)

mysql> insert into suppliers (Supplier, ProductName) values ('Chips chips', 'Straws');                                      Query OK, 1 row affected (0.00 sec)

mysql> select * from suppliers;
+----+-------------+-------------+------------------+
| ID | Supplier    | ProductName | ContactEmail     |
+----+-------------+-------------+------------------+
|  1 | Chips chips | Straws      | contact@host.com |
+----+-------------+-------------+------------------+
1 row in set (0.00 sec)


### Joins
#The INNER JOIN creates a new result table by combining column values of two
#tables (table1 and table2) based upon the join-predicate. The query
#A full join is equivalent to a left join union all right join.
mysql> select * from suppliers;
+----+----------------------+-------------------+------------------------+
| ID | Supplier             | ProductName       | ContactEmail           |
+----+----------------------+-------------------+------------------------+
|  1 | Chips chips          | Straws            | info@chipschips.com    |
|  2 | Bed, Bath and Beyond | Knives            | help@b3.com            |
|  3 | Grossmans            | Drill bits        | mike@mikegrossmans.com |
|  4 | Fishbone Forks       | Ursula's Utensils | ursula@mainz.de        |
+----+----------------------+-------------------+------------------------+
4 rows in set (0.00 sec)

mysql> select * from products;
+------+----------------+---------------+--------+
| ID   | ProductName    | ContactName   | Price  |
+------+----------------+---------------+--------+
|    1 | Knives         | Joe Smith     |  19.99 |
|    2 | Spoons         | Karen McGue   |   2.38 |
|    3 | Fishbone Forks | Captain Joe   | 121.34 |
|    4 | Straws         | Mitch Cohawke |  33.99 |
+------+----------------+---------------+--------+
4 rows in set (0.00 sec)

mysql> select * from products left join suppliers on products.productname=suppliers.productname;
+------+----------------+---------------+--------+------+----------------------+-------------+---------------------+
| ID   | ProductName    | ContactName   | Price  | ID   | Supplier             | ProductName | ContactEmail        |
+------+----------------+---------------+--------+------+----------------------+-------------+---------------------+
|    4 | Straws         | Mitch Cohawke |  33.99 |    1 | Chips chips          | Straws      | info@chipschips.com |
|    1 | Knives         | Joe Smith     |  19.99 |    2 | Bed, Bath and Beyond | Knives      | help@b3.com         |
|    2 | Spoons         | Karen McGue   |   2.38 | NULL | NULL                 | NULL        | NULL                |
|    3 | Fishbone Forks | Captain Joe   | 121.34 | NULL | NULL                 | NULL        | NULL                |
+------+----------------+---------------+--------+------+----------------------+-------------+---------------------+
4 rows in set (0.01 sec)

mysql> select * from products inner join suppliers on products.productname=suppliers.productname;
+------+-------------+---------------+-------+----+----------------------+-------------+---------------------+
| ID   | ProductName | ContactName   | Price | ID | Supplier             | ProductName | ContactEmail        |
+------+-------------+---------------+-------+----+----------------------+-------------+---------------------+
|    4 | Straws      | Mitch Cohawke | 33.99 |  1 | Chips chips          | Straws      | info@chipschips.com |
|    1 | Knives      | Joe Smith     | 19.99 |  2 | Bed, Bath and Beyond | Knives      | help@b3.com         |
+------+-------------+---------------+-------+----+----------------------+-------------+---------------------+
2 rows in set (0.00 sec)



### Here is an alternative to describe:

mysql> desc products;
+-------------+--------------+------+-----+---------+-------+
| Field       | Type         | Null | Key | Default | Extra |
+-------------+--------------+------+-----+---------+-------+
| ID          | int(11)      | YES  |     | NULL    |       |
| ProductName | varchar(255) | YES  |     | NULL    |       |
| ContactName | varchar(255) | YES  |     | NULL    |       |
| Price       | float        | YES  |     | NULL    |       |
+-------------+--------------+------+-----+---------+-------+
4 rows in set (0.16 sec)


### Unicode
Nvarchar versus varchar

### SQL provides a variety of math functions

### Having
# The GROUP BY clause follows the WHERE clause in a SELECT statement and precedes the ORDER BY clause.
select country, sum(CustomerID) as sumfunc from customers group by country having sumfunc > 100 and Country like 'U%' order by sumfunc; 
Country	sumfunc
UK	213
USA	796


### use SQL as a calculator
select 45.0/2.98;


### any and all
SQL> SELECT * FROM CUSTOMERS
WHERE AGE > ALL (SELECT AGE FROM CUSTOMERS WHERE SALARY > 6500);
+----+--------+-----+-----------+---------+
| ID | NAME   | AGE | ADDRESS   | SALARY  |
+----+--------+-----+-----------+---------+
|  1 | Ramesh |  32 | Ahmedabad | 2000.00 |
+----+--------+-----+-----------+---------+
1 row in set (0.02 sec)
SQL> SELECT * FROM CUSTOMERS
WHERE AGE > ANY (SELECT AGE FROM CUSTOMERS WHERE SALARY > 6500);
+----+----------+-----+-----------+---------+
| ID | NAME     | AGE | ADDRESS   | SALARY  |
+----+----------+-----+-----------+---------+
|  1 | Ramesh   |  32 | Ahmedabad | 2000.00 |
|  2 | Khilan   |  25 | Delhi
|  4 | Chaitali |  25 | Mumbai
|  5 | Hardik   |  27 | Bhopal
+----+----------+-----+-----------+---------


### the like can be applied to numbers as well as text
select * from products where price like '_8';
# the percent symbol wildcard represents 0 or more characters


### Union, union all, intercept, except are all possible


### Started advanced operations
### Alter, truncate and other


### Create View view_name as select ...
# Note that a check clause can be added 
# There are many rules applied to views for updating and inserting rows
CREATE VIEW CUSTOMERS_VIEW AS
SELECT name, age FROM  CUSTOMERS WHERE age IS NOT NULL WITH CHECK OPTION;


### Monday, July 11, 2016
# If alias fails with where clase then use subquery (this is an inline view)
select * from (select productname, price as handle from products) as x where handle > 45 order by handle;

# concatenation in MySQL
select concat(description, '----', ContactName) from persons;
+-------------------------------------------------+
| concat(description, '----', ContactName)        |
+-------------------------------------------------+
| Gas canisters----James Woodborn                 |
| Digital compass for dog sleds----Charlie Parker |
+-------------------------------------------------+

# the case expression to add a column and use if-else
mysql> select * from suppliers;
+----+----------------------+-------------------+------------------------+
| ID | Supplier             | ProductName       | ContactEmail           |
+----+----------------------+-------------------+------------------------+
|  1 | Chips chips          | Straws            | info@chipschips.com    |
|  2 | Bed, Bath and Beyond | Knives            | help@b3.com            |
|  3 | Grossmans            | Drill bits        | mike@mikegrossmans.com |
|  4 | Fishbone Forks       | Ursula's Utensils | ursula@mainz.de        |
|  5 | Boston Warehouse     | Manfrotto tripod  | contact@host.com       |
+----+----------------------+-------------------+------------------------+
5 rows in set (0.00 sec)

mysql> select productname, id, case when id > 75 then 'overpriced' when id <= 2 then 'underpriced' else 'okay' end as status from suppliers; 
+-------------------+----+-------------+
| productname       | id | status      |
+-------------------+----+-------------+
| Straws            |  1 | underpriced |
| Knives            |  2 | underpriced |
| Drill bits        |  3 | okay        |
| Ursula's Utensils |  4 | okay        |
| Manfrotto tripod  |  5 | okay        |
+-------------------+----+-------------+

# remove the not null constraint on a column
mysql> alter table suppliers modify supplier char(80) default null;

# replacing null in the result-set without changing the table
mysql> select * from suppliers;
+----+----------------------+-------------------+------------------------+
| ID | supplier             | ProductName       | ContactEmail           |
+----+----------------------+-------------------+------------------------+
|  1 | Chips chips          | Straws            | info@chipschips.com    |
|  2 | Bed, Bath and Beyond | Knives            | help@b3.com            |
|  3 | Grossmans            | Drill bits        | mike@mikegrossmans.com |
|  4 | Fishbone Forks       | Ursula's Utensils | ursula@mainz.de        |
|  5 | Boston Warehouse     | Manfrotto tripod  | contact@host.com       |
|  6 | Bills Trucking       | cargo service     | bill@billyboy.org      |
|  7 | NULL                 | Cargo service     | bill@billyboy.org      |
+----+----------------------+-------------------+------------------------+
7 rows in set (0.00 sec)

# the coalesce function returns the first non-null results from left to right; if nothing
# is found then it returns null
mysql> select coalesce(supplier, 0) from suppliers;
+-----------------------+
| coalesce(supplier, 0) |
+-----------------------+
| Chips chips           |
| Bed, Bath and Beyond  |
| Grossmans             |
| Fishbone Forks        |
| Boston Warehouse      |
| Bills Trucking        |
| 0                     |
+-----------------------+

SELECT ProductName,UnitPrice*(UnitsInStock+COALESCE(UnitsOnOrder,0)) FROM Products;

# order by number of column
select * from products order by 6 desc; // 6th column

# order by second to last character
mysql> select * from suppliers order by substr(productname, length(productname) - 1);
+----+----------------------+-------------------+------------------------+
| ID | supplier             | ProductName       | ContactEmail           |
+----+----------------------+-------------------+------------------------+
|  6 | Bills Trucking       | cargo service     | bill@billyboy.org      |
|  7 | NULL                 | Cargo service     | bill@billyboy.org      |
|  2 | Bed, Bath and Beyond | Knives            | help@b3.com            |
|  4 | Fishbone Forks       | Ursula's Utensils | ursula@mainz.de        |
|  5 | Boston Warehouse     | Manfrotto tripod  | contact@host.com       |
|  3 | Grossmans            | Drill bits        | mike@mikegrossmans.com |
|  1 | Chips chips          | Straws            | info@chipschips.com    |
+----+----------------------+-------------------+------------------------+

# case statement for sorting

# Note: union will probabily internally use a sort to eliminiate duplicates

# using IN to select rows from a list of items from another table
select * from customers where customers.country in (select distinct suppliers.country from suppliers) order by customers.country;
select * from customers where customers.country not in (select distinct suppliers.country from suppliers) order by customers.country;

# wildcard select
select c.* from customers as c;


###Tuesday, July 12, 2016
# all, any, some
SELECT e1.empno, e1.sal
FROM   emp e1
WHERE  e1.sal > ALL (SELECT e2.sal
                     FROM   emp e2
                     WHERE  e2.deptno = 20);

# CLOB is a character large object -- maybe replaced by text
# There are five data types that deal with dates and times: date, time w/o time zone, timestamp w/o time zone
# Intervals analogous to timediff are available
# Row types breaks the rule of only one value per field
# First normal form
# Array and multiset is also possible Create table customer (Phone character varying (15) array[3]);
# Cardinality relates to array size
# REF is a pointer which can be dereferenced to obtain the actual contents
# UDT or user defined types are also possible - these are nice because one can match the data types
# of the host (application) with those of the database. UDT include distinct types and structured types
# Distinct types are like typedefs from C/C++
# XML can be stored
# Schemas contain tables and views


### Wednesday, July 13, 2016
# Adding a column dependent on current columns
select * from (select customername, city, case when city > 'L' then 0 else 1 end as city_flag from customers) as x where city_flag=1;
customername	city	city_flag
Alfreds Futterkiste	Berlin	1
Cactus Comidas para llevar	Buenos Aires	1
Chop-suey Chinese	Bern	1
Drachenblut Delikatessend	Aachen	1

# using an line case clause
select *, price*case when price < 10 then 0.1 when price < 20 then 1 when price > 20 then 1.6 end as scaled_price from products;

mysql> select *, power(id, 2) from suppliers;
+----+----------------------+-------------------+------------------------+--------------+
| ID | supplier             | ProductName       | ContactEmail           | power(id, 2) |
+----+----------------------+-------------------+------------------------+--------------+
|  1 | Chips chips          | Straws            | info@chipschips.com    |            1 |
|  2 | Bed, Bath and Beyond | Knives            | help@b3.com            |            4 |
|  3 | Grossmans            | Drill bits        | mike@mikegrossmans.com |            9 |
|  4 | Fishbone Forks       | Ursula's Utensils | ursula@mainz.de        |           16 |
|  5 | Boston Warehouse     | Manfrotto tripod  | contact@host.com       |           25 |
|  6 | Bills Trucking       | cargo service     | bill@billyboy.org      |           36 |
|  7 | NULL                 | Cargo service     | bill@billyboy.org      |           49 |
+----+----------------------+-------------------+------------------------+--------------+

# find common rows between tables
select * from charles # where charles is a view with rows in customers with customerid > 50
intersect
select * from customers;

# find rows in the first table which do not exist in the second
select * from customers
except
select * from charles;
